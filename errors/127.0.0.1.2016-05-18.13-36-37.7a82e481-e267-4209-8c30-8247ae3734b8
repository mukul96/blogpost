(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> invalid literal for long() with base 10: '|186|187|'"
p3
sS'layer'
p4
S'/home/mukul/web2py/applications/blogpost/controllers/default.py'
p5
sS'code'
p6
S"# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a samples controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\nimport datetime\n\ndef user():\n    return dict(form=auth())\n\n\n@auth.requires_login()\ndef add_blog_post():\n    if request.post_vars['title'] != None:\n        blog_title = request.post_vars['title']\n        blog_data = request.post_vars['data']\n        x = request.post_vars['video']\n        y=x.split('=')\n        blog_date = datetime.datetime.now()\n        db.content.insert(created_by=auth.user.email\n                          ,title=blog_title\n                        ,data=blog_data\n                        ,video='https://www.youtube.com/embed/'+y[1]\n                        ,date_time=blog_date)\n        redirect(URL('show'))\n    return dict()\n\n\n@auth.requires_login()\ndef show():\n    \n    likes = request.args(0)\n    ids=db().select(db.content.id)\n    all_blog={}\n    all_comments={}\n    for row in ids:\n        id1 = row.id\n        all_blog[id1]={}\n\n        x=db(db.content.id==id1).select(db.content.ALL)\n        comments=db(db.comment.blog_id==id1).select(db.comment.ALL)\n        \n        all_comments[id1]={}\n        for i in comments:\n            data=i.data\n            id2=i.id\n\n            all_comments[id1][id2] = data\n        #print all_comments\n\n        for rx in x:\n            data = rx.data;\n            video=rx.video\n            title=rx.title\n            created=rx.created_by\n\n        x = data;\n        z=video\n        y=title\n\n        all_blog[id1]['data']=x\n\n\n        all_blog[id1]['video']=z\n\n        all_blog[id1]['title']=y\n        all_blog[id1]['created_by']=created\n        \n\n        \n\n    return dict(all_blog=all_blog,all_comments=all_comments,likes=likes)\n\n\n@auth.requires_login()\ndef add_comment():\n    commented=request.post_vars['commented']\n    blog_id=request.post_vars['blog_id']\n    db.comment.insert(blog_id=blog_id,data=commented,created_by=auth.user)\n    redirect('show')\n    \n    \n    \n@auth.requires_login()\ndef edit_blog():\n    title=request.post_vars['title']\n    video=request.post_vars['video']\n    data=request.post_vars['data']\n    blog_id=request.post_vars['blog_id']\n    print data,video,title,blog_id\n    return dict(video=video,data=data,title=title,blog_id=blog_id)\n\n\n@auth.requires_login()\ndef edit_show():\n    title=request.post_vars['title']\n    blog_id=request.post_vars['blog_id']\n    data=request.post_vars['data']\n    video=request.post_vars['video']\n    db(db.content.id==blog_id).update(title=title,data=data,video=video)\n    redirect('show')\n    \n    \n@auth.requires_login()\ndef delete_blog():\n    title=request.post_vars['title']\n    blog_id=request.post_vars['blog_id']\n    data=request.post_vars['data']\n    video=request.post_vars['video']\n    db(db.content.id==blog_id).delete()\n    db(db.comment.blog_id==blog_id).delete()\n    redirect('show')\n    \n\n@auth.requires_login()\ndef blog_like():\n    if not session.counter:\n        session.counter = 1\n    else:\n        session.counter += 1\n    likes=session.counter\n    redirect(URL('show',args=likes))\n    \n    \n@auth.requires_login()\ndef delete_comment():\n    id=request.post_vars['id']\n    db(db.comment.id==id).delete()\n    redirect('show')\n\nresponse._vars=response._caller(delete_comment)\n"
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/mukul/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/mukul/web2py/applications/blogpost/controllers/default.py", line 136, in <module>\n  File "/home/mukul/web2py/gluon/globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/mukul/web2py/gluon/tools.py", line 4241, in f\n    return action(*a, **b)\n  File "/home/mukul/web2py/applications/blogpost/controllers/default.py", line 133, in delete_comment\n    db(db.comment.id==id).delete()\n  File "/home/mukul/web2py/gluon/packages/dal/pydal/objects.py", line 2040, in delete\n    ret = db._adapter.delete(tablename, self.query)\n  File "/home/mukul/web2py/gluon/packages/dal/pydal/adapters/sqlite.py", line 103, in delete\n    deleted = [x[table._id.name] for x in db(query).select(table._id)]\n  File "/home/mukul/web2py/gluon/packages/dal/pydal/objects.py", line 2020, in select\n    return adapter.select(self.query, fields, attributes)\n  File "/home/mukul/web2py/gluon/packages/dal/pydal/adapters/sqlite.py", line 123, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "/home/mukul/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1283, in select\n    sql = self._select(query, fields, attributes)\n  File "/home/mukul/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1170, in _select\n    sql_w = \' WHERE \' + self.expand(query) if query else \'\'\n  File "/home/mukul/web2py/gluon/packages/dal/pydal/adapters/base.py", line 952, in expand\n    rv = op(first, second, **optional_args)\n  File "/home/mukul/web2py/gluon/packages/dal/pydal/adapters/base.py", line 846, in EQ\n    self.expand(second, first.type))\n  File "/home/mukul/web2py/gluon/packages/dal/pydal/adapters/base.py", line 962, in expand\n    rv = self.represent(expression, field_type)\n  File "/home/mukul/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1435, in represent\n    return str(long(obj))\nValueError: invalid literal for long() with base 10: \'|186|187|\'\n'
p11
s.